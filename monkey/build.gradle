/*
 * Copyright (c) 2020 Bytedance Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @author Zhao Zhang, Yuhui Su
 */


apply plugin: 'com.android.library'

configurations {
    fatJarDependencies {
        canBeResolved = true
        canBeConsumed = false
        // 将 implementation 的所有依赖都包含进来
        extendsFrom configurations.implementation
    }
}

android {
    compileSdkVersion 32

    defaultConfig {
        minSdkVersion 22
        targetSdkVersion 32
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        // ndk push的时候记得把 arm7 和 8 加回去
        ndk {
            abiFilters 'x86', 'x86_64'
        }
    }

    buildTypes {
        debug{
            debuggable true
        }
        release {
            minifyEnabled false
        }
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    externalNativeBuild {
        cmake {
            path("../native/CMakeLists.txt")
            version = "3.18.1"
        }
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging false
        }
    }
    ndkVersion '25.2.9519653'

}



repositories {
    maven {
        url "https://dl.google.com/dl/android/maven2/"
    }
}

dependencies {
    compileOnly files('libs/framework.jar')
    implementation 'com.google.code.gson:gson:2.8.9'
    //    implementation 'com.googlecode.jsonrpc4j:jsonrpc4j:1.7.0'
    implementation 'com.squareup.okhttp3:okhttp:3.12.12'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.12.12'
    implementation 'org.nanohttpd:nanohttpd:2.3.1'
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile).tap {
        configureEach {
            Set<File> fileSet = options.bootstrapClasspath.getFiles()
            List<File> newFileList = new ArrayList<File>()
            newFileList.add(new File("libs/framework.jar"))
//            newFileList.add(new File("libs/framework35.jar"))
            newFileList.addAll(fileSet)
            options.bootstrapClasspath = files(newFileList.toArray())
        }
    }
}

task clearJar(type: Delete) {
    delete 'build/libs/monkey.jar'
}

task makeJar(type: Jar) {
    def srcPath = 'build/intermediates/aar_main_jar/debug/'
    def fileMonkey = file(srcPath + "classes.jar")
    // 解压主 jar
    from zipTree(fileMonkey)
    // 解压 fatJarDependencies 配置里的所有 jar 文件（包括 okhttp3 等依赖）
    from {
        configurations.fatJarDependencies.collect { dependency ->
            dependency.isDirectory() ? dependency : zipTree(dependency)
        }
    }
    archiveBaseName = 'monkey'
    destinationDirectory = file("build/libs/")
}

makeJar.dependsOn(clearJar, assemble)
